// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: listing.proto

package listingpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ListingService_GetAllListings_FullMethodName = "/listingpb.ListingService/GetAllListings"
	ListingService_AddListing_FullMethodName     = "/listingpb.ListingService/AddListing"
	ListingService_EditListing_FullMethodName    = "/listingpb.ListingService/EditListing"
	ListingService_DeleteListing_FullMethodName  = "/listingpb.ListingService/DeleteListing"
	ListingService_AddLike_FullMethodName        = "/listingpb.ListingService/AddLike"
	ListingService_RemoveLike_FullMethodName     = "/listingpb.ListingService/RemoveLike"
)

// ListingServiceClient is the client API for ListingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListingServiceClient interface {
	GetAllListings(ctx context.Context, in *GetAllListingsRequest, opts ...grpc.CallOption) (*GetAllListingsResponse, error)
	AddListing(ctx context.Context, in *AddListingRequest, opts ...grpc.CallOption) (*AddListingResponse, error)
	EditListing(ctx context.Context, in *EditListingRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteListing(ctx context.Context, in *DeleteListingRequest, opts ...grpc.CallOption) (*Empty, error)
	AddLike(ctx context.Context, in *AddLikeRequest, opts ...grpc.CallOption) (*Empty, error)
	RemoveLike(ctx context.Context, in *RemoveLikeRequest, opts ...grpc.CallOption) (*Empty, error)
}

type listingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewListingServiceClient(cc grpc.ClientConnInterface) ListingServiceClient {
	return &listingServiceClient{cc}
}

func (c *listingServiceClient) GetAllListings(ctx context.Context, in *GetAllListingsRequest, opts ...grpc.CallOption) (*GetAllListingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllListingsResponse)
	err := c.cc.Invoke(ctx, ListingService_GetAllListings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) AddListing(ctx context.Context, in *AddListingRequest, opts ...grpc.CallOption) (*AddListingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddListingResponse)
	err := c.cc.Invoke(ctx, ListingService_AddListing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) EditListing(ctx context.Context, in *EditListingRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ListingService_EditListing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) DeleteListing(ctx context.Context, in *DeleteListingRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ListingService_DeleteListing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) AddLike(ctx context.Context, in *AddLikeRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ListingService_AddLike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) RemoveLike(ctx context.Context, in *RemoveLikeRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ListingService_RemoveLike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListingServiceServer is the server API for ListingService service.
// All implementations must embed UnimplementedListingServiceServer
// for forward compatibility.
type ListingServiceServer interface {
	GetAllListings(context.Context, *GetAllListingsRequest) (*GetAllListingsResponse, error)
	AddListing(context.Context, *AddListingRequest) (*AddListingResponse, error)
	EditListing(context.Context, *EditListingRequest) (*Empty, error)
	DeleteListing(context.Context, *DeleteListingRequest) (*Empty, error)
	AddLike(context.Context, *AddLikeRequest) (*Empty, error)
	RemoveLike(context.Context, *RemoveLikeRequest) (*Empty, error)
	mustEmbedUnimplementedListingServiceServer()
}

// UnimplementedListingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedListingServiceServer struct{}

func (UnimplementedListingServiceServer) GetAllListings(context.Context, *GetAllListingsRequest) (*GetAllListingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllListings not implemented")
}
func (UnimplementedListingServiceServer) AddListing(context.Context, *AddListingRequest) (*AddListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddListing not implemented")
}
func (UnimplementedListingServiceServer) EditListing(context.Context, *EditListingRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditListing not implemented")
}
func (UnimplementedListingServiceServer) DeleteListing(context.Context, *DeleteListingRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteListing not implemented")
}
func (UnimplementedListingServiceServer) AddLike(context.Context, *AddLikeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLike not implemented")
}
func (UnimplementedListingServiceServer) RemoveLike(context.Context, *RemoveLikeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLike not implemented")
}
func (UnimplementedListingServiceServer) mustEmbedUnimplementedListingServiceServer() {}
func (UnimplementedListingServiceServer) testEmbeddedByValue()                        {}

// UnsafeListingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListingServiceServer will
// result in compilation errors.
type UnsafeListingServiceServer interface {
	mustEmbedUnimplementedListingServiceServer()
}

func RegisterListingServiceServer(s grpc.ServiceRegistrar, srv ListingServiceServer) {
	// If the following call pancis, it indicates UnimplementedListingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ListingService_ServiceDesc, srv)
}

func _ListingService_GetAllListings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllListingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).GetAllListings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_GetAllListings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).GetAllListings(ctx, req.(*GetAllListingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_AddListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).AddListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_AddListing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).AddListing(ctx, req.(*AddListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_EditListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).EditListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_EditListing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).EditListing(ctx, req.(*EditListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_DeleteListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).DeleteListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_DeleteListing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).DeleteListing(ctx, req.(*DeleteListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_AddLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).AddLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_AddLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).AddLike(ctx, req.(*AddLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_RemoveLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).RemoveLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_RemoveLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).RemoveLike(ctx, req.(*RemoveLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ListingService_ServiceDesc is the grpc.ServiceDesc for ListingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "listingpb.ListingService",
	HandlerType: (*ListingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllListings",
			Handler:    _ListingService_GetAllListings_Handler,
		},
		{
			MethodName: "AddListing",
			Handler:    _ListingService_AddListing_Handler,
		},
		{
			MethodName: "EditListing",
			Handler:    _ListingService_EditListing_Handler,
		},
		{
			MethodName: "DeleteListing",
			Handler:    _ListingService_DeleteListing_Handler,
		},
		{
			MethodName: "AddLike",
			Handler:    _ListingService_AddLike_Handler,
		},
		{
			MethodName: "RemoveLike",
			Handler:    _ListingService_RemoveLike_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "listing.proto",
}
