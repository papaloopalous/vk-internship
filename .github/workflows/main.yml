name: CI/CD Pipeline


on:
  push:
    branches:
      - main


env:
  GO_VERSION: '1.24'
  DOCKER_USER: ${{ secrets.DOCKER_USER }}
  DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  VM_IP: ${{ secrets.VM_IP }}


jobs:
  build_api:
    name: Build api
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Build
        working-directory: ./api
        run: |
          go mod tidy
          go build -v ./...


  build_listing:
    name: Build listing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Build
        working-directory: ./listing_service
        run: |
          go mod tidy
          go build -v ./...


  build_user:
    name: Build user
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Build
        working-directory: ./user_service
        run: |
          go mod tidy
          go build -v ./...


  build_session:
    name: Build session
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Build
        working-directory: ./session_service
        run: |
          go mod tidy
          go build -v ./...


  lint_api:
    name: Lint api
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Download Go modules
        working-directory: ./api
        run: |
          go mod download
          go mod tidy
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: v2.1.1
          working-directory: ./api


  lint_listing:
    name: Lint listing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Download Go modules
        working-directory: ./listing_service
        run: |
          go mod download
          go mod tidy
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: v2.1.1
          working-directory: ./listing_service


  lint_session:
    name: Lint session
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Download Go modules
        working-directory: ./session_service
        run: |
          go mod download
          go mod tidy
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: v2.1.1
          working-directory: ./session_service


  lint_user:
    name: Lint user
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Download Go modules
        working-directory: ./user_service
        run: |
          go mod download
          go mod tidy
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: v2.1.1
          working-directory: ./user_service


  deploy:
    name: Deploy via SSH
    needs: [build_api, build_listing, build_session, build_user, lint_api, lint_listing, lint_session, lint_user]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ env.DOCKER_TOKEN }}

      - name: Setup configs from secrets
        run: |
          mkdir -p ./api/config
          cat <<EOF > .env
          TARANTOOL_HOST=${{ secrets.TARANTOOL_HOST }}
          TARANTOOL_PORT=${{ secrets.TARANTOOL_PORT }}
          TARANTOOL_USER=${{ secrets.TARANTOOL_USER }}
          TARANTOOL_PASS=${{ secrets.TARANTOOL_PASS }}
          POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASS=${{ secrets.POSTGRES_PASS }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          LISTING_LIMIT=${{ secrets.LISTING_LIMIT }}
          API_PORT=${{ secrets.API_PORT }}
          API_TIMEOUT=${{ secrets.API_TIMEOUT }}
          API_HEALTHCHECK_INTERVAL=${{ secrets.API_HEALTHCHECK_INTERVAL }}
          CRYPTO_PRIME=${{ secrets.CRYPTO_PRIME }}
          CRYPTO_GENERATOR=${{ secrets.CRYPTO_GENERATOR }}
          CRYPTO_SERVER_SECRET_KEY=${{ secrets.CRYPTO_SERVER_SECRET_KEY }}
          SESSION_LIFETIME=${{ secrets.SESSION_LIFETIME }}
          SESSION_HOST=${{ secrets.SESSION_HOST }}
          SESSION_ADDR=${{ secrets.SESSION_ADDR }}
          USER_HOST=${{ secrets.USER_HOST }}
          USER_ADDR=${{ secrets.USER_ADDR }}
          LISTING_HOST=${{ secrets.LISTING_HOST }}
          LISTING_ADDR=${{ secrets.LISTING_ADDR }}
          EOF
          make all


      - name: Build and Push api Docker Image
        run: |
          cd ./api
          docker build -f Dockerfile -t $DOCKER_USER/vk-internship_api:latest .
          docker push $DOCKER_USER/vk-internship_api:latest

      - name: Build and Push listing Docker Image
        run: |
          cd ./listing_service
          docker build -f Dockerfile -t $DOCKER_USER/vk-internship_listing:latest .
          docker push $DOCKER_USER/vk-internship_listing:latest

      - name: Build and Push session Docker Image
        run: |
          cd ./session_service
          docker build -f Dockerfile -t $DOCKER_USER/vk-internship_session:latest .
          docker push $DOCKER_USER/vk-internship_session:latest

      - name: Build and Push user Docker Image
        run: |
          cd ./user_service
          docker build -f Dockerfile -t $DOCKER_USER/vk-internship_user:latest .
          docker push $DOCKER_USER/vk-internship_user:latest

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ env.SSH_PRIVATE_KEY }}

      - name: Add remote host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H $VM_IP >> ~/.ssh/known_hosts

      - name: Deploy to VM
        run: |
          set -e
          ssh ${{ secrets.VM_USER }}@$VM_IP "echo 1"
          scp compose.yml ${{ secrets.VM_USER }}@$VM_IP:/home/app/
          ssh ${{ secrets.VM_USER }}@$VM_IP "cd app && sudo mkdir -p logs uploads && sudo docker-compose down || echo 'No existing Compose stack to stop'"
          ssh ${{ secrets.VM_USER }}@$VM_IP "cd app && sudo docker-compose pull"
          ssh ${{ secrets.VM_USER }}@$VM_IP "cd app && sudo docker-compose up -d"
